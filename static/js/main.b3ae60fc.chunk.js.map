{"version":3,"sources":["Common/Utils/utils.ts","components/Buttons/ButtonsBlock.tsx","Img/rs_school_js.png","components/Footer/Footer.tsx","components/GameResultBlock/GameResultBlock.tsx","App.tsx","Common/Logic/checkGameResults.ts","reportWebVitals.ts","index.tsx","components/Footer/footer.module.css"],"names":["isWinField","winFieldsArr","cellId","some","val","length","ButtonsBlock","props","autoplayBtnCl","classNames","isAutoplay","className","onClick","startNewGame","type","startAutoplay","Footer","style","footer","to","footerImg","src","logo","alt","GameResultBlock","winner","currentPlayer","App","useState","setCurrentPlayer","gameCells","setGameCells","player","gameResult","setGameResult","autoplay","setAutoplay","autoplayIndex","setAutoplayIndex","autoplayRandCells","setAutoplayRandCells","useEffect","gameRes","winCombinations","checkWinner","winArr","forEach","element","every","key","checkGameResults","prevGameCells","map","ind","changePlayer","setTimeout","handleClick","event","currentTarget","id","index","sort","Math","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uLAIaA,EAAa,SACxBC,EACAC,GAEA,SAAID,EAAaE,MAAK,SAACC,GAAD,OAASA,IAAQF,MAAmC,IAAxBD,EAAaI,S,wBCCpDC,EAA8B,SAACC,GAExC,IAAMC,EAAgBC,IAAW,MAAO,qBAAsB,OAAQ,CAClE,OAAUF,EAAMG,aAGpB,OACI,qBAAKC,UAAU,WAAf,SACI,sBAAKA,UAAU,MAAf,UACI,wBAAQC,QAASL,EAAMM,aAAcC,KAAK,SAASH,UAAU,kBAA7D,sBACA,wBAAQC,QAASL,EAAMQ,cAAeD,KAAK,SAASH,UAAWH,EAA/D,6B,OCnBD,MAA0B,yC,gBCK5BQ,EAAS,WAElB,OAEI,yBAAQL,UAAWM,IAAMC,OAAzB,UACI,cAAC,IAAD,CAASC,GAAG,wBAAZ,SACI,qBAAKR,UAAWM,IAAMG,UAAWC,IAAKC,EAAMC,IAAI,WAEpD,sBAAMZ,UAAU,OAAhB,4BACA,cAAC,IAAD,CAASQ,GAAG,+BAAZ,iCCPCK,EAAiC,SAACjB,GAC3C,OACI,sBAAKI,UAAU,WAAf,UACsB,KAAjBJ,EAAMkB,QAAiB,wDAA2BlB,EAAMmB,cAAjC,OACL,KAAjBnB,EAAMkB,QAAkC,QAAjBlB,EAAMkB,QAAqB,qBAAId,UAAU,uBAAd,mCAA4DJ,EAAMkB,UACpG,QAAjBlB,EAAMkB,QAAoB,oBAAId,UAAU,oBAAd,iCCyGxBgB,EA5GH,WAAO,IAAD,EAOwBC,mBAAS,KAPjC,mBAOXF,EAPW,KAOIG,EAPJ,OAQgBD,mBAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAR1D,mBAQXE,EARW,KAQAC,EARA,OASkBH,mBAAyB,CAAEI,OAAQ,GAAI/B,aAAc,KATvE,mBASXgC,EATW,KASCC,EATD,OAUcN,oBAAS,GAVvB,mBAUXO,EAVW,KAUDC,EAVC,OAWwBR,mBAAS,GAXjC,mBAWXS,EAXW,KAWIC,EAXJ,OAYgCV,mBAAwB,IAZxD,mBAYXW,EAZW,KAYQC,EAZR,KAchBC,qBAAU,WACR,IAAIC,ECxBwB,SAC9BZ,GAEA,IAAMa,EAAkB,CACtB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGHC,EAAc,SAACZ,GACnB,IAAIa,EAAwB,GAQ5B,OANAF,EAAgBG,SAAQ,SAACC,GACvB,GAAIA,EAAQC,OAAM,SAACC,GAAD,OAASnB,EAAUmB,KAASjB,KAC5C,OAAQa,EAASE,KAIdF,GAGT,OAAID,EAAY,KAAKvC,OAAS,EACrB,CAAE2B,OAAQ,IAAK/B,aAAc2C,EAAY,MACvCA,EAAY,KAAKvC,OAAS,EAC5B,CAAE2B,OAAQ,IAAK/B,aAAc2C,EAAY,MACvCd,EAAUkB,OAAM,SAAC5C,GAAD,MAAiB,KAARA,KAC3B,CAAE4B,OAAQ,MAAO/B,aAAc,IAC1B,CAAE+B,OAAQ,GAAI/B,aAAc,IDR1BiD,CAAiBpB,GAC/BI,EAAcQ,KAEb,CAACZ,IAOJW,qBAAU,WAEJN,GAAaI,EAAkBlC,OAAS,GAAMgC,GAAuC,KAAtBJ,EAAWD,QAC5ED,GAAa,SAACoB,GAAD,OAAmBA,EAAcC,KAAI,SAAChD,EAAKiD,GAAN,OAAeA,IAAQd,EAAkBF,GAAiBjC,EAAMsB,EAAgBtB,QAClIkD,IAEAC,YAAW,WACTjB,IAAmBD,KAClB,MAGHD,GAAY,KAEb,CAACD,EAAUE,IAEd,IAAMiB,EAAe,WACKzB,EAAN,MAAlBH,EAAyC,IAAwB,MAG7D8B,EAAc,SAACC,GACnB,IAAMvD,GAAUuD,EAAMC,cAAcC,GACV,KAAtB1B,EAAWD,QACa,KAAtBF,EAAU5B,KACZ6B,GAAa,SAACoB,GAAD,OAAmBA,EAAcC,KAAI,SAAChD,EAAKwD,GAAN,OAAiBA,IAAU1D,EAASE,EAAMsB,EAAgBtB,QAC5GkD,MAKAzC,EAAe,WACnBgB,EAAiB,KACjBK,EAAc,CAAEF,OAAQ,GAAI/B,aAAc,KAC1C8B,EAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAC9CK,GAAY,GACZE,EAAiB,GACjBE,EAAqB,KAUvB,OACE,sBAAK7B,UAAU,kCAAf,UACE,wBAAQA,UAAU,OAAlB,SACE,oBAAIA,UAAU,aAAd,uCAGF,sBAAKA,UAAU,uBAAf,UACE,cAAC,EAAD,CAAiBc,OAAQQ,EAAWD,OAAQN,cAAeA,IAC3D,sBAAKf,UAAU,MAAf,UACE,qBAAKA,UAAU,UAEf,sBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAf,UACE,qBAAKC,QAAS4C,EAAaG,GAAI,IAAKhD,UAAWX,EAAWiC,EAAWhC,aAAc,GAAK,+BAAiC,uBAAzH,SAAkJ6B,EAAU,KAC5J,qBAAKlB,QAAS4C,EAAaG,GAAI,IAAKhD,UAAWX,EAAWiC,EAAWhC,aAAc,GAAK,wFAA0F,gFAAlL,SAAoQ6B,EAAU,KAC9Q,qBAAKlB,QAAS4C,EAAaG,GAAI,IAAKhD,UAAWX,EAAWiC,EAAWhC,aAAc,GAAK,+BAAiC,uBAAzH,SAAkJ6B,EAAU,QAE9J,sBAAKnB,UAAU,8DAAf,UACE,qBAAKC,QAAS4C,EAAaG,GAAI,IAAKhD,UAAWX,EAAWiC,EAAWhC,aAAc,GAAK,+BAAiC,uBAAzH,SAAmJ6B,EAAU,KAC7J,qBAAKlB,QAAS4C,EAAaG,GAAI,IAAKhD,UAAWX,EAAWiC,EAAWhC,aAAc,GAAK,wFAA0F,gFAAlL,SAAoQ6B,EAAU,KAC9Q,qBAAKlB,QAAS4C,EAAaG,GAAI,IAAKhD,UAAWX,EAAWiC,EAAWhC,aAAc,GAAK,+BAAiC,uBAAzH,SAAmJ6B,EAAU,QAE/J,sBAAKnB,UAAU,MAAf,UACE,qBAAKC,QAAS4C,EAAaG,GAAI,IAAKhD,UAAWX,EAAWiC,EAAWhC,aAAc,GAAK,+BAAiC,uBAAzH,SAAmJ6B,EAAU,KAC7J,qBAAKlB,QAAS4C,EAAaG,GAAI,IAAKhD,UAAWX,EAAWiC,EAAWhC,aAAc,GAAK,wFAA0F,gFAAlL,SAAoQ6B,EAAU,KAC9Q,qBAAKlB,QAAS4C,EAAaG,GAAI,IAAKhD,UAAWX,EAAWiC,EAAWhC,aAAc,GAAK,+BAAiC,uBAAzH,SAAmJ6B,EAAU,WAIjK,qBAAKnB,UAAU,aAEjB,cAAC,EAAD,CAAcE,aAAcA,EAAcE,cAtC1B,WACpBF,IACAuB,GAAY,GACZI,EAAkC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GL1EhDqB,MAAK,kBAAMC,KAAKC,SAAW,QK6GsCrD,WAAYyB,OAEtF,cAAC,EAAD,QElGS6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCFdQ,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,K,kBClBAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,UAAY,6B","file":"static/js/main.b3ae60fc.chunk.js","sourcesContent":["export const shuffleArray = (array: Array<number>): Array<number> => {\r\n  return array.sort(() => Math.random() - 0.5);\r\n};\r\n\r\nexport const isWinField = (\r\n  winFieldsArr: Array<number>,\r\n  cellId: number\r\n): boolean => {\r\n  if (winFieldsArr.some((val) => val === cellId) && winFieldsArr.length === 3) {\r\n    return true;\r\n  } else return false;\r\n};\r\n","import React, { FC } from 'react'\r\nimport classNames from \"classnames\"\r\n\r\ntype PropTypes = {\r\n    startNewGame: () => void\r\n    startAutoplay: () => void\r\n    isAutoplay:boolean\r\n}\r\n\r\nexport const ButtonsBlock: FC<PropTypes> = (props) => {\r\n\r\n    const autoplayBtnCl = classNames(\"btn\", \"btn-outline-danger\", \"ms-3\", {\r\n        \"active\": props.isAutoplay\r\n    })\r\n\r\n    return (\r\n        <div className=\"row my-3\">\r\n            <div className=\"col\">\r\n                <button onClick={props.startNewGame} type=\"button\" className=\"btn btn-primary\">New game</button>\r\n                <button onClick={props.startAutoplay} type=\"button\" className={autoplayBtnCl}>Auto play</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/rs_school_js.1766f2cf.png\";","import React from 'react'\r\nimport { NavLink } from \"react-router-dom\"\r\nimport logo from \"../../Img/rs_school_js.png\"\r\nimport style from \"./footer.module.css\"\r\n\r\nexport const Footer = () => {\r\n\r\n    return (\r\n\r\n        <footer className={style.footer} >\r\n            <NavLink to=\"https://rs.school/js/\" >\r\n                <img className={style.footerImg} src={logo} alt=\"logo\" />\r\n            </NavLink>\r\n            <span className=\"mx-3\">February, 2021</span>\r\n            <NavLink to=\"https://github.com/Vivasergo\">Author's GitHub</NavLink>\r\n        </footer>\r\n\r\n\r\n    )\r\n}","import React, { FC } from 'react'\r\n\r\ntype PropsType = {\r\n    currentPlayer: string\r\n    winner: string\r\n}\r\n\r\nexport const GameResultBlock: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className=\"row my-3\">\r\n            {props.winner === \"\" && <h4>Current turn: Player \"{props.currentPlayer}\"</h4>}\r\n            {(props.winner !== \"\" && props.winner !== \"Tie\") && <h4 className=\"winner-title fw-bold\">The winner is: Player {props.winner}</h4>}\r\n            {props.winner === \"Tie\" && <h4 className=\"tie-title fw-bold\">Tie this time !</h4>}\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { checkGameResults } from './Common/Logic/checkGameResults';\r\nimport { isWinField, shuffleArray } from './Common/Utils/utils';\r\nimport { ButtonsBlock } from './components/Buttons/ButtonsBlock';\r\nimport { Footer } from './components/Footer/Footer';\r\nimport { GameResultBlock } from './components/GameResultBlock/GameResultBlock';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  type gameResultType = {\r\n    player: string\r\n    winFieldsArr: Array<number>\r\n  }\r\n\r\n  let [currentPlayer, setCurrentPlayer] = useState(\"X\")\r\n  let [gameCells, setGameCells] = useState(['', '', '', '', '', '', '', '', ''])\r\n  let [gameResult, setGameResult] = useState<gameResultType>({ player: \"\", winFieldsArr: [] })\r\n  let [autoplay, setAutoplay] = useState(false)\r\n  let [autoplayIndex, setAutoplayIndex] = useState(0)\r\n  let [autoplayRandCells, setAutoplayRandCells] = useState<Array<number>>([])\r\n\r\n  useEffect(() => {\r\n    let gameRes = checkGameResults(gameCells)\r\n    setGameResult(gameRes)\r\n\r\n  }, [gameCells])\r\n\r\n  //logic of autoplay mode: using useEffect and 2 dependencies to emulate recursive call \r\n  // (first fire of useEffect invoked by changing autoplay local state to true, then adding to state gameCell current player action,\r\n  // and changing player. Next by autoplayindex local state increment triggering useEffect and affecting next turn,\r\n  // loop breaking condition is appearing the winner or the tie condition in gameResult local state).\r\n  //The timer function slowing down the actions\r\n  useEffect(() => {\r\n\r\n    if (autoplay && (autoplayRandCells.length - 1) >= autoplayIndex && gameResult.player === \"\") {\r\n      setGameCells((prevGameCells) => prevGameCells.map((val, ind) => (ind === autoplayRandCells[autoplayIndex] ? val = currentPlayer : val)))\r\n      changePlayer()\r\n\r\n      setTimeout(() => {\r\n        setAutoplayIndex(++autoplayIndex)\r\n      }, 1000);\r\n    }\r\n    else {\r\n      setAutoplay(false)\r\n    }\r\n  }, [autoplay, autoplayIndex])\r\n\r\n  const changePlayer = (): void => {\r\n    currentPlayer === \"X\" ? setCurrentPlayer(\"O\") : setCurrentPlayer(\"X\")\r\n  }\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\r\n    const cellId = +event.currentTarget.id\r\n    if (gameResult.player === \"\") {\r\n      if (gameCells[cellId] === '') {\r\n        setGameCells((prevGameCells) => prevGameCells.map((val, index) => (index === cellId ? val = currentPlayer : val)))\r\n        changePlayer()\r\n      }\r\n    }\r\n  }\r\n\r\n  const startNewGame = (): void => {\r\n    setCurrentPlayer(\"X\")\r\n    setGameResult({ player: \"\", winFieldsArr: [] })\r\n    setGameCells(['', '', '', '', '', '', '', '', ''])\r\n    setAutoplay(false)\r\n    setAutoplayIndex(0)\r\n    setAutoplayRandCells([])\r\n  }\r\n\r\n  const startAutoplay = () => {\r\n    startNewGame()\r\n    setAutoplay(true)\r\n    setAutoplayRandCells(shuffleArray([0, 1, 2, 3, 4, 5, 6, 7, 8]))\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"main-block text-center pt-2 m-0\">\r\n      <header className=\"mb-4\">\r\n        <h3 className=\"game-title\">React game: Tic Tac Toe</h3>\r\n      </header>\r\n\r\n      <div className=\"container game-field\">\r\n        <GameResultBlock winner={gameResult.player} currentPlayer={currentPlayer} />\r\n        <div className=\"row\">\r\n          <div className=\"col-1\"></div>\r\n\r\n          <div className=\"col\">\r\n            <div className=\"row\">\r\n              <div onClick={handleClick} id={\"0\"} className={isWinField(gameResult.winFieldsArr, 0) ? \"col game-cell win-field-cell\" : \"col game-cell notWin\"}>{gameCells[0]}</div>\r\n              <div onClick={handleClick} id={\"1\"} className={isWinField(gameResult.winFieldsArr, 1) ? \"col game-cell border border-3 border-dark border-bottom-0 border-top-0 win-field-cell\" : \"col game-cell border border-3 border-dark border-bottom-0 border-top-0 notWin\"}>{gameCells[1]}</div>\r\n              <div onClick={handleClick} id={\"2\"} className={isWinField(gameResult.winFieldsArr, 2) ? \"col game-cell win-field-cell\" : \"col game-cell notWin\"}>{gameCells[2]}</div>\r\n            </div>\r\n            <div className=\"row border border-3 border-dark border-start-0 border-end-0\">\r\n              <div onClick={handleClick} id={\"3\"} className={isWinField(gameResult.winFieldsArr, 3) ? \"col game-cell win-field-cell\" : \"col game-cell notWin\"} >{gameCells[3]}</div>\r\n              <div onClick={handleClick} id={\"4\"} className={isWinField(gameResult.winFieldsArr, 4) ? \"col game-cell border border-3 border-dark border-bottom-0 border-top-0 win-field-cell\" : \"col game-cell border border-3 border-dark border-bottom-0 border-top-0 notWin\"}>{gameCells[4]}</div>\r\n              <div onClick={handleClick} id={\"5\"} className={isWinField(gameResult.winFieldsArr, 5) ? \"col game-cell win-field-cell\" : \"col game-cell notWin\"} >{gameCells[5]}</div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div onClick={handleClick} id={\"6\"} className={isWinField(gameResult.winFieldsArr, 6) ? \"col game-cell win-field-cell\" : \"col game-cell notWin\"} >{gameCells[6]}</div>\r\n              <div onClick={handleClick} id={\"7\"} className={isWinField(gameResult.winFieldsArr, 7) ? \"col game-cell border border-3 border-dark border-bottom-0 border-top-0 win-field-cell\" : \"col game-cell border border-3 border-dark border-bottom-0 border-top-0 notWin\"}>{gameCells[7]}</div>\r\n              <div onClick={handleClick} id={\"8\"} className={isWinField(gameResult.winFieldsArr, 8) ? \"col game-cell win-field-cell\" : \"col game-cell notWin\"} >{gameCells[8]}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-1\"></div>\r\n        </div>\r\n        <ButtonsBlock startNewGame={startNewGame} startAutoplay={startAutoplay} isAutoplay={autoplay} />\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const checkGameResults = (\r\n  gameCells: Array<string>\r\n): { player: string; winFieldsArr: Array<number> } => {\r\n  const winCombinations = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  const checkWinner = (player: string): Array<number> => {\r\n    let winArr: Array<number> = [];\r\n\r\n    winCombinations.forEach((element) => {\r\n      if (element.every((key) => gameCells[key] === player)) {\r\n        return (winArr = element);\r\n      }\r\n    });\r\n\r\n    return winArr;\r\n  };\r\n\r\n  if (checkWinner(\"X\").length > 0) {\r\n    return { player: \"X\", winFieldsArr: checkWinner(\"X\") };\r\n  } else if (checkWinner(\"O\").length > 0) {\r\n    return { player: \"O\", winFieldsArr: checkWinner(\"O\") };\r\n  } else if (gameCells.every((val) => val !== \"\")) {\r\n    return { player: \"Tie\", winFieldsArr: [] };\r\n  } else return { player: \"\", winFieldsArr: [] };\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport \"../src/CSS/app.css\"\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__2YRpt\",\"footerImg\":\"footer_footerImg__BPXD7\"};"],"sourceRoot":""}